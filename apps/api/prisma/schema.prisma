// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER MANAGEMENT & AUTHENTICATION
// ============================================================================

model Organization {
  id          String @id @default(cuid())
  name        String
  slug        String @unique
  description String?
  website     String?
  logo        String?
  settings    Json?
  
  // Subscription info
  planType    String @default("free") // free, pro, enterprise
  planLimits  Json?
  billingEmail String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       User[]
  agents      Agent[]
  workflows   Workflow[]
  apiKeys     ApiKey[]
  
  @@map("organizations")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  passwordHash    String
  firstName       String
  lastName        String
  avatar          String?
  role            String    @default("USER") // USER, ADMIN, SUPER_ADMIN
  isActive        Boolean   @default(true)
  emailVerified   Boolean   @default(false)
  emailVerifiedAt DateTime?
  
  // Organization relationship
  organizationId  String?
  organization    Organization? @relation(fields: [organizationId], references: [id])
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastLoginAt     DateTime?
  lastActivityAt  DateTime?
  
  // Relations
  refreshTokens   RefreshToken[]
  permissions     UserPermission[]
  auditLogs       AuditLog[]
  workflowRuns    WorkflowRun[]
  notifications   Notification[]
  
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

model UserPermission {
  id         String @id @default(cuid())
  userId     String
  permission String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, permission])
  @@map("user_permissions")
}

model ApiKey {
  id             String    @id @default(cuid())
  name           String
  key            String    @unique
  organizationId String
  isActive       Boolean   @default(true)
  permissions    String[]  @default([])
  expiresAt      DateTime?
  lastUsedAt     DateTime?
  
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("api_keys")
}

// ============================================================================
// AI AGENT SYSTEM
// ============================================================================

model Agent {
  id              String @id @default(cuid())
  name            String
  type            String // code-reviewer, architecture-agent, deployment-agent, etc.
  description     String
  systemPrompt    String
  capabilities    String[]
  specializations String[]
  status          String @default("active") // active, inactive, maintenance
  version         String @default("1.0.0")
  
  // Configuration
  config          Json?
  tools           String[]
  maxConcurrency  Int    @default(1)
  
  // Organization relationship
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  workflowSteps   WorkflowStep[]
  taskExecutions  TaskExecution[]
  
  @@map("agents")
}

model Workflow {
  id             String @id @default(cuid())
  name           String
  description    String
  type           String // feature-development, bug-fix, security-audit, etc.
  status         String @default("active") // active, inactive, draft
  version        String @default("1.0.0")
  
  // Configuration
  config         Json?
  triggerEvents  String[]
  
  // Organization relationship
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  
  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relations
  steps          WorkflowStep[]
  runs           WorkflowRun[]
  
  @@map("workflows")
}

model WorkflowStep {
  id          String @id @default(cuid())
  workflowId  String
  agentId     String
  name        String
  description String
  order       Int
  
  // Configuration
  config      Json?
  inputs      Json?
  outputs     Json?
  
  // Relations
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  agent       Agent    @relation(fields: [agentId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([workflowId, order])
  @@map("workflow_steps")
}

model WorkflowRun {
  id            String   @id @default(cuid())
  workflowId    String
  userId        String
  status        String   @default("pending") // pending, running, completed, failed, cancelled
  priority      String   @default("normal") // low, normal, high, urgent
  
  // Input/Output
  input         Json?
  output        Json?
  error         String?
  
  // Metrics
  startedAt     DateTime?
  completedAt   DateTime?
  duration      Int? // in milliseconds
  
  // Relations
  workflow      Workflow       @relation(fields: [workflowId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  taskExecutions TaskExecution[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("workflow_runs")
}

model TaskExecution {
  id            String   @id @default(cuid())
  workflowRunId String
  agentId       String
  name          String
  status        String   @default("pending") // pending, running, completed, failed
  
  // Input/Output
  input         Json?
  output        Json?
  error         String?
  logs          String?
  
  // Metrics
  startedAt     DateTime?
  completedAt   DateTime?
  duration      Int? // in milliseconds
  
  // Relations
  workflowRun   WorkflowRun @relation(fields: [workflowRunId], references: [id], onDelete: Cascade)
  agent         Agent       @relation(fields: [agentId], references: [id])
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("task_executions")
}

// ============================================================================
// INTEGRATIONS & EXTERNAL SERVICES
// ============================================================================

model Integration {
  id             String @id @default(cuid())
  name           String
  type           String // github, slack, jira, etc.
  organizationId String
  
  // Configuration
  config         Json
  credentials    Json // Encrypted
  isActive       Boolean @default(true)
  
  // Health status
  lastHealthCheck DateTime?
  healthStatus    String   @default("unknown") // healthy, unhealthy, unknown
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@unique([organizationId, type])
  @@map("integrations")
}

// ============================================================================
// MONITORING & ANALYTICS
// ============================================================================

model Metric {
  id          String   @id @default(cuid())
  name        String
  type        String   // counter, gauge, histogram
  value       Float
  unit        String?
  tags        Json?
  
  timestamp   DateTime @default(now())
  
  @@index([name, timestamp])
  @@map("metrics")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  
  user       User?    @relation(fields: [userId], references: [id])
  
  createdAt  DateTime @default(now())
  
  @@index([userId, createdAt])
  @@index([action, createdAt])
  @@index([resource, resourceId])
  @@map("audit_logs")
}

model Alert {
  id          String   @id @default(cuid())
  title       String
  description String
  severity    String   // info, warning, error, critical
  type        String   // system, security, performance, business
  status      String   @default("active") // active, acknowledged, resolved
  
  // Configuration
  conditions  Json
  actions     Json
  
  // Metrics
  triggeredAt DateTime @default(now())
  resolvedAt  DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([severity, status])
  @@index([type, triggeredAt])
  @@map("alerts")
}

// ============================================================================
// NOTIFICATIONS & COMMUNICATION
// ============================================================================

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  message     String
  type        String   // info, success, warning, error
  priority    String   @default("normal") // low, normal, high
  
  // Status
  isRead      Boolean  @default(false)
  readAt      DateTime?
  
  // Metadata
  metadata    Json?
  expiresAt   DateTime?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId, isRead])
  @@index([createdAt])
  @@map("notifications")
}

// ============================================================================
// FILE STORAGE & DOCUMENTS
// ============================================================================

model Document {
  id            String   @id @default(cuid())
  name          String
  type          String   // specification, report, log, artifact
  mimeType      String
  size          Int
  url           String?
  content       String?
  metadata      Json?
  
  // Organization context
  organizationId String?
  
  // Relations
  workflowRunId  String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([type, organizationId])
  @@index([workflowRunId])
  @@map("documents")
}