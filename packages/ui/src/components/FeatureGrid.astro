---
export interface Feature {
  title: string;
  description: string;
  icon?: string;
  iconComponent?: any;
  color?: string;
}

export interface Props {
  title?: string;
  subtitle?: string;
  features: Feature[];
  columns?: 2 | 3 | 4;
  class?: string;
}

const {
  title,
  subtitle,
  features,
  columns = 3,
  class: className = '',
} = Astro.props;

const gridClasses = {
  2: 'lg:grid-cols-2',
  3: 'lg:grid-cols-3',
  4: 'lg:grid-cols-4',
};
---

<section class={`py-24 sm:py-32 ${className}`}>
  <div class="mx-auto max-w-7xl px-6 lg:px-8">
    {(title || subtitle) && (
      <div class="mx-auto max-w-2xl text-center">
        {subtitle && (
          <p class="text-base font-semibold leading-7 text-accent-blue">
            {subtitle}
          </p>
        )}
        {title && (
          <h2 class="mt-2 text-3xl font-bold tracking-tight sm:text-4xl">
            {title}
          </h2>
        )}
      </div>
    )}
    
    <div class={`mx-auto mt-16 max-w-2xl sm:mt-20 lg:mt-24 lg:max-w-none`}>
      <dl class={`grid max-w-xl grid-cols-1 gap-x-8 gap-y-16 lg:max-w-none ${gridClasses[columns]}`}>
        {features.map((feature) => (
          <div class="flex flex-col">
            <dt class="flex items-center gap-x-3 text-base font-semibold leading-7">
              {feature.icon && (
                <div class={`h-10 w-10 flex items-center justify-center rounded-lg ${feature.color || 'bg-accent-blue'}`}>
                  <Fragment set:html={feature.icon} />
                </div>
              )}
              {feature.title}
            </dt>
            <dd class="mt-4 flex flex-auto flex-col text-base leading-7 text-gray-300">
              <p class="flex-auto">
                {feature.description}
              </p>
            </dd>
          </div>
        ))}
      </dl>
    </div>
  </div>
</section>